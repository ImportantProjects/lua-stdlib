before: |
  require "spec_helper"

  this_module  = "std.math"

  global_table = "_G"
  base_module  = "math"
  extend_base  = { "round", "_floor" }
  enhance_base = { "floor" }

  -- 'should_contain' will match keys as well as values :)
  all_apis = {}
  for _, s in ipairs (extend_base)     do all_apis[s] = true end
  for _, s in ipairs (enhance_base)    do all_apis[s] = true end

  M = require (this_module)

specify std.math:
- context when required:
  - context by name:
    - it does not touch the global table:
        expect (show_apis {added_to=global_table, by=this_module}).
          should_equal {}
    - it contains apis from the core math table:
        expect (show_apis {from=base_module, not_in=this_module}).
          should_contain.a_permutation_of (all_apis)
    - it enhances some apis from the core math table:
        expect (show_apis {from=base_module, enhanced_in=this_module}).
          should_contain.a_permutation_of (enhance_base)

  - context via the std module:
    - it adds apis to the core math table:
        expect (show_apis {added_to=base_module, by="std"}).
          should_contain.a_permutation_of (extend_base)
    - it replaces some apis from the core math table:
        expect (show_apis {from=base_module, enhanced_after='require "std"'}).
          should_contain.a_permutation_of (enhance_base)


specify math:
- before: |
    M = require "std.math"

    extends      = math
    enhancements = { "floor" }
    extensions   = { "round" }


- context when required:
  - before:
      enhanced = {}
      for _, api in ipairs (enhancements) do enhanced[api] = true end

  - context by name:
    - before: |
        function restore (g, m)
          for _, api in ipairs (enhancements) do
            g[api], g["_" .. api] = m[api], m["_" .. api]
          end
          for _, api in ipairs (extensions) do g[api] = m[api] end
        end

        for _, api in ipairs (enhancements) do
          extends[api] = M["_" .. api]
        end
        for _, api in ipairs (extensions) do extends[api] = nil end
    - after:
        restore (extends, M)
    - it does not perturb the global table:
        for _, api in ipairs (extensions) do
          expect (extends[api]).should_be (nil)
        end
        for _, api in ipairs (enhancements) do
          expect (extends[api]).should_be (M["_" .. api])
        end
    - it contains all global access points:
        for api in pairs (extends) do
          if enhanced[api] then
            expect (M[api]).should_not_be (extends[api])
          else
            expect (M[api]).should_be (extends[api])
          end
        end

  - context via the std module:
    - before:
        require "std"
    - it adds extension apis to the global table:
        for api in pairs (M) do
          expect (extends[api]).should_be (M[api])
        end
    - it does not add any other global access points:
        for api in pairs (extends) do
          if not enhanced[api] then
            expect (M[api]).should_be (extends[api])
          end
        end


- describe floor:


- describe round:
