before: |
  this_module  = "std.functional"
  global_table = "_G"

  M = require (this_module)

specify std.functional:
- context when required:
  - context by name:
    - it does not touch the global table:
        expect (show_apis {added_to=global_table, by=this_module}).
          to_equal {}

  - context via the std module:
    - it does not touch the global table:
        expect (show_apis {added_to=global_table, by="std"}).
          to_equal {}


- describe bind:
  - it diagnoses missing arguments: |
      expect (M.bind ()).
        to_error "bad argument #1 to 'std.functional.bind' (function expected, got no value)"
  - it diagnoses wrong argument types: |
      expect (M.bind (false)).
        to_error "bad argument #1 to 'std.functional.bind' (function expected, got boolean)"
  - it does not affect normal operation if no arguments are bound:
      expect (M.bind (math.min, {}) (2, 3, 4)).to_be (2)
  - it takes the extra arguments into account:
      expect (M.bind (math.min, {1, 0}) (2, 3, 4)).to_be (0)
  - it appends final call arguments:
      expect (M.bind (math.max, {2, 3}) (4, 5, 1)).to_be (5)
  - it does not require all arguments in final call:
      div = function (a, b) return a / b end
      expect (M.bind (div, {100}) (25)).to_be (4)
  - it supports out of order extra arguments:
      expect (M.bind (math.pow, {[2] = 3}) (2)).to_be (8)
  - it supports the legacy api:
      expect (M.bind (math.min) (2, 3, 4)).to_be (2)
      expect (M.bind (math.min, 1, 0) (2, 3, 4)).to_be (0)
      expect (M.bind (math.pow, nil, 3) (2)).to_be (8)


- describe case:
  - before:
      yes     = function ()  return true end
      no      = function ()  return false end
      default = function (s) return s end
      branches = { yes = yes, no = no, default }
  - it diagnoses missing arguments: |
      expect (M.case (nil)).
        to_error "bad argument #2 to 'std.functional.case' (non-empty table expected, got no value)"
  - it diagnoses wrong argument types: |
      expect (M.case ("no", false)).
        to_error "bad argument #2 to 'std.functional.case' (non-empty table expected, got boolean)"
  - it diagnoses too many arguments:
      expect (M.case (1, {2}, false)).
        to_error "too many arguments to 'std.functional.case' (no more than 2 expected, got 3)"
  - it matches against branch keys:
      expect (M.case ("yes", branches)).to_be (true)
      expect (M.case ("no",  branches)).to_be (false)
  - it has a default for unmatched keys:
      expect (M.case ("none", branches)).to_be "none"
  - it returns nil for unmatched keys with no default:
      expect (M.case ("none", { yes = yes, no = no })).to_be (nil)
  - it evaluates `with` exactly once:
      s = "prince"
      function acc () s = s .. "s"; return s end
      expect (M.case (acc (), {
        prince   = function () return "one" end,
        princes  = function () return "many" end,
        princess = function () return "one" end,
                   function () return "gibberish" end,
      })).to_be "many"


- describe collect:
  - it diagnoses missing arguments: |
      expect (M.collect ()).
        to_error "bad argument #1 to 'std.functional.collect' (function expected, got no value)"
  - it diagnoses wrong argument types: |
      expect (M.collect (false)).
        to_error "bad argument #1 to 'std.functional.collect' (function expected, got boolean)"
  - it collects iterator results:
      expect (M.collect (ipairs, {"a", "b", "c"})).to_equal {1, 2, 3}


- describe compose:
  - it diagnoses missing arguments: |
      expect (M.compose ()).
        to_error "bad argument #1 to 'std.functional.compose' (function expected, got no value)"
  - it diagnoses wrong argument types: |
      expect (M.compose (false)).
        to_error "bad argument #1 to 'std.functional.compose' (function expected, got boolean)"
      expect (M.compose (M.id, false)).
        to_error "bad argument #2 to 'std.functional.compose' (function expected, got boolean)"
  - it composes a single function correctly:
      expect (M.compose (M.id) (1)).to_be (1)
  - it composes functions in the correct order:
      expect (M.compose (math.sin, math.cos) (1)).
        to_be (math.cos (math.sin (1)))


- describe curry:
  - it diagnoses missing arguments: |
      expect (M.curry ()).
        to_error "bad argument #1 to 'std.functional.curry' (function expected, got no value)"
      expect (M.curry (M.id)).
        to_error "bad argument #2 to 'std.functional.curry' (int expected, got no value)"
  - it diagnoses wrong argument types: |
      expect (M.curry (false)).
        to_error "bad argument #1 to 'std.functional.curry' (function expected, got boolean)"
      expect (M.curry (M.id, 1.234)).
        to_error "bad argument #2 to 'std.functional.curry' (int expected, got number)"
  - it diagnoses too many arguments:
      expect (M.curry (M.id, 2, false)).
        to_error "too many arguments to 'std.functional.curry' (no more than 2 expected, got 3)"
  - it returns a zero argument function uncurried:
      expect (M.curry (M.id, 0)).to_be (M.id)
  - it returns a one argument function uncurried:
      expect (M.curry (M.id, 1)).to_be (M.id)
  - it curries a two argument function:
      expect (M.curry (M.id, 2)).not_to_be (M.id)
  - it evaluates intermediate arguments one at a time:
      expect (M.curry (math.min, 3) (2) (3) (4)).to_equal (2)
  - it returns a curried function that can be partially applied:
      bin = M.curry (math.pow, 2) (2)
      expect (bin (2)).to_be (math.pow (2, 2))
      expect (bin (10)).to_be (math.pow (2, 10))


- describe eval:
  - it diagnoses missing arguments: |
      expect (M.eval ()).
        to_error "bad argument #1 to 'std.functional.eval' (string expected, got no value)"
  - it diagnoses wrong argument types: |
      expect (M.eval (false)).
        to_error "bad argument #1 to 'std.functional.eval' (string expected, got boolean)"
  - it diagnoses too many arguments:
      expect (M.eval ("1", false)).
        to_error "too many arguments to 'std.functional.eval' (no more than 1 expected, got 2)"
  - it diagnoses invalid lua:
      # Some internal error when eval tries to call uncompilable "=" code.
      expect (M.eval "=").to_error ()
  - it evaluates a string of lua code:
      expect (M.eval "math.pow (2, 10)").to_be (math.pow (2, 10))


- describe filter:
  - before:
     elements = {"a", "b", "c", "d", "e"}
     inverse  = require "std.table".invert (elements)
  - it diagnoses missing arguments: |
      expect (M.filter ()).
        to_error "bad argument #1 to 'std.functional.filter' (function expected, got no value)"
      expect (M.filter (M.id)).
        to_error "bad argument #2 to 'std.functional.filter' (function expected, got no value)"
  - it diagnoses wrong argument types: |
      expect (M.filter (false)).
        to_error "bad argument #1 to 'std.functional.filter' (function expected, got boolean)"
      expect (M.filter (M.id, false)).
        to_error "bad argument #2 to 'std.functional.filter' (function expected, got boolean)"
  - it iterates through element keys:
      expect (M.filter (M.id, ipairs, elements)).
        to_equal {1, 2, 3, 4, 5}
      expect (M.filter (M.id, pairs, inverse)).
        to_contain.a_permutation_of (elements)
  - it passes each iterated element to filter function:
      t = {}
      M.filter (function (e) t[#t + 1] = e end, pairs, inverse)
      expect (t).to_contain.a_permutation_of (elements)
  - it returns a table of filtered keys:
      expect (M.filter (function (e) return e % 2 == 0 end, ipairs, elements)).
        to_equal {2, 4}
      expect (M.filter (function (e) return e:match "[aeiou]" end, pairs, inverse)).
        to_contain.a_permutation_of {"a", "e"}


- describe fold:
  - before:
      list = require "std.list"
      List = list {}
  - it diagnoses missing arguments: |
      expect (M.fold ()).
        to_error "bad argument #1 to 'std.functional.fold' (function expected, got no value)"
      expect (M.fold (M.id)).
        to_error "bad argument #2 to 'std.functional.fold' (any value expected, got no value)"
      expect (M.fold (M.id, 1)).
        to_error "bad argument #3 to 'std.functional.fold' (function expected, got no value)"
  - it diagnoses wrong argument types: |
      expect (M.fold (false)).
        to_error "bad argument #1 to 'std.functional.fold' (function expected, got boolean)"
      expect (M.fold (M.id, 1, false)).
        to_error "bad argument #3 to 'std.functional.fold' (function expected, got boolean)"
  - it calls a binary function over element keys:
      expect (M.fold (M.op["+"], 2, list.elems, List {3})).
        to_be (2 + 3)
      expect (M.fold (M.op["*"], 2, list.elems, List {3, 4})).
        to_be (2 * 3 * 4)
  - it folds elements from left to right:
      expect (M.fold (math.pow, 2, list.elems, List {3, 4})).
        to_be (math.pow (math.pow (2, 3), 4))


- describe id:
  - it returns argument unchanged:
      expect (M.id (true)).to_be (true)
      expect (M.id {1, 1, 2, 3}).to_equal {1, 1, 2, 3}
  - it returns multiple arguments unchanged:
      expect ({M.id (1, "two", false)}).to_equal {1, "two", false}


- describe map:
  - before:
     elements = {"a", "b", "c", "d", "e"}
     inverse  = require "std.table".invert (elements)
  - it diagnoses missing arguments: |
      expect (M.map ()).
        to_error "bad argument #1 to 'std.functional.map' (function expected, got no value)"
      expect (M.map (M.id)).
        to_error "bad argument #2 to 'std.functional.map' (function expected, got no value)"
  - it diagnoses wrong argument types: |
      expect (M.map (false)).
        to_error "bad argument #1 to 'std.functional.map' (function expected, got boolean)"
      expect (M.map (M.id, false)).
        to_error "bad argument #2 to 'std.functional.map' (function expected, got boolean)"
  - it iterates through element keys:
      expect (M.map (M.id, ipairs, elements)).
        to_equal {1, 2, 3, 4, 5}
      expect (M.map (M.id, pairs, inverse)).
        to_contain.a_permutation_of (elements)
  - it passes each iterated element to map function:
      t = {}
      M.map (function (e) t[#t + 1] = e end, pairs, inverse)
      expect (t).to_contain.a_permutation_of (elements)
  - it returns a table of mapped keys:
      expect (M.map (function (e) return e % 2 end, ipairs, elements)).
        to_equal {1, 0, 1, 0, 1}
      expect (M.map (function (e) return e .. "x" end, pairs, inverse)).
        to_contain.a_permutation_of {"ax", "bx", "cx", "dx", "ex"}


- describe memoize:
  - before:
      memfn = M.memoize (function (x) return {x} end)
  - it diagnoses missing arguments: |
      expect (M.memoize ()).
        to_error "bad argument #1 to 'std.functional.memoize' (function expected, got no value)"
  - it diagnoses wrong argument types: |
      expect (M.memoize (false)).
        to_error "bad argument #1 to 'std.functional.memoize' (function expected, got boolean)"
      expect (M.memoize (M.id, false)).
        to_error "bad argument #2 to 'std.functional.memoize' (function or nil expected, got boolean)"
  - it diagnoses too many arguments:
      expect (M.memoize (M.id, M.id, false)).
        to_error "too many arguments to 'std.functional.memoize' (no more than 2 expected, got 3)"
  - it returns the same object for the same arguments:
      t = memfn (1)
      expect (memfn (1)).to_be (t)
  - it returns a different object for different arguments:
      expect (memfn (1)).not_to_be (memfn (2))
  - it returns the same object for table valued arguments:
      t = memfn {1, 2, 3}
      expect (memfn {1, 2, 3}).to_be (t)
      t = memfn {foo = "bar", baz = "quux"}
      expect (memfn {foo = "bar", baz = "quux"}).to_be (t)
      expect (memfn {baz = "quux", foo = "bar"}).to_be (t)
  - it returns a different object for different table arguments:
      expect (memfn {1, 2, 3}).not_to_be (memfn {1, 2})
      expect (memfn {1, 2, 3}).not_to_be (memfn {3, 1, 2})
      expect (memfn {1, 2, 3}).not_to_be (memfn {1, 2, 3, 4})
  - it accepts alternative normalization function:
      normalize = function (...) return select ("#", ...) end
      memfn = M.memoize (function (x) return {x} end, normalize)
      expect (memfn "same").to_be (memfn "not same")
      expect (memfn (1, 2)).to_be (memfn (false, "x"))
      expect (memfn "one").not_to_be (memfn ("one", "two"))
