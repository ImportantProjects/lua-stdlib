# bootstrap.conf (Stdlib) version 2013-05-05
#
# Copyright (C) 2013 Gary V. Vaughan
# Written by Gary V. Vaughan, 2013

# This is free software; see the source for copying conditions.  There is NO
# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Libtool; see the file COPYING.  If not, a copy
# can be downloaded from  http://www.gnu.org/licenses/gpl.html,
# or obtained by writing to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.


## -------------- ##
## Configuration. ##
## -------------- ##

# List of programs, minimum versions, and software urls required to
# bootstrap, maintain and release GNU Zile.

# Build prerequisites
buildreq='
        git        1.5.5   http://git-scm.com
'

# List of slingshot files to link into stdlib tree before autotooling.
slingshot_files='
	.autom4te.cfg
	GNUmakefile
	Makefile.am
	build-aux/do-release-commit-and-tag
	build-aux/gitlog-to-changelog
	build-aux/mkrockspecs
	build-aux/release.mk
	build-aux/rockspecs.mk
	build-aux/sanity.mk
	build-aux/specl.mk
	m4/ax_compare_version.m4
	m4/ax_lua.m4
	travis.yml.in
'

# No need to do any gnulib-tooling here.
gnulib_tool=true

# The not-synced with gnulib warning is bogus until upstream adopts
# the saner bootstrap script.
require_bootstrap_uptodate=:


## --------------- ##
## Hook functions. ##
## --------------- ##

# stdlib_force_changelog
# ----------------------
# Automake requires that ChangeLog exist.
stdlib_force_changelog ()
{
    $debug_cmd

    echo "Autogenerated by 'make dist'" > ChangeLog || exit 1
}
func_add_hook func_gnulib_tool stdlib_force_changelog


# slingshot_copy FILENAME SRCDIR DESTDIR
# --------------------------------------
# If option '--copy' was specified, or soft-linking SRCFILE to DESTFILE
# fails, then try to copy SRCFILE to DESTFILE (making sure to update the
# timestamp so that a series of files with dependencies can be copied
# in the right order that their timestamps won't trigger rebuilds).
slingshot_copy ()
{
    $debug_cmd

    slingshot_srcfile=`echo "$2/$1" |sed -e 's|/\./|/|g'`
    slingshot_destfile=`echo "$3/$1" |sed -e 's|/\./|/|g'`

    # Require --force to remove existing $slingshot_destfile.
    $opt_force && $RM "$slingshot_destfile"
    test -f "$slingshot_destfile" && {
      func_warn_and_continue "'$slingshot_destfile' exists: use '--force' to overwrite"
      return 0
    }

    # Be careful to support 'func_copy dir/target srcbase destbase'.
    func_dirname "$slingshot_destfile"
    func_mkdir_p "$func_dirname_result"

    # Copy or link according to '--copy' option.
    if $opt_copy; then
      slingshot_copycmd=$CP
      slingshot_copy_type=copying
    else
      slingshot_copycmd=$LN_S
      slingshot_copy_type=linking

      func_relative_path "$3" "$2"
      slingshot_srcfile=$func_relative_path_result/$1
    fi
    slingshot_copy_msg="$slingshot_copy_type file '$slingshot_destfile'"
    $opt_verbose && \
      slingshot_copy_msg="$slingshot_copy_type $slingshot_srcfile $3"

    if $opt_dry_run || {
        ( umask 0
          $slingshot_copycmd "$slingshot_srcfile" "$slingshot_destfile"
        ) >/dev/null 2>&1
      }
    then
      echo "$slingshot_copy_msg"
    else
      func_error "$slingshot_copy_type '$2/$1' to '$3/' failed"
      return 1
    fi
}


# stdlib_copy_slingshot
# ---------------------
# Update files from slingshot subproject.
stdlib_link_slingshot ()
{
    $debug_cmd

    # Make sure we have the latest mkrockspecs
    func_verbose 'make sure slingshot/build-aux/mkrockspecs is up-to-date'
    make -C slingshot build-aux/mkrockspecs

    # Update in-tree links.
    for file in $slingshot_files; do
      func_dirname_and_basename "./$file"
      slingshot_copy "$func_basename_result" \
        "slingshot/$func_dirname_result" "$func_dirname_result"
    done
}
func_add_hook func_prep stdlib_link_slingshot


# Local variables:
# mode: shell-script
# sh-indentation: 2
# eval: (add-hook 'write-file-hooks 'time-stamp)
# time-stamp-start: "# bootstrap.conf (Slingshot) version "
# time-stamp-format: "%:y-%02m-%02d"
# time-stamp-end: "$"
# End:
